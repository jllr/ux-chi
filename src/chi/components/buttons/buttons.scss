@import '_mixins';
@import '_variables';

$state-colors: (
  brand: (
    color: blue,
    button-text-color: $text-white,
    tone: 70,
    tone-hover: 80,
    tone-focus: 90
  ),
  primary: (
    color: blue,
    button-text-color: $text-white,
    tone: 70,
    tone-hover: 80,
    tone-focus: 90
  ),
  secondary: (
    color: mint,
    button-text-color: $text-black,
    tone: 40,
    tone-hover: 50,
    tone-focus: 60
  ),
  danger: (
    color: red,
    button-text-color: $text-white,
    tone: 60,
    tone-hover: 70,
    tone-focus: 80
  ),
  dark: (
    color: black,
    button-text-color: $text-white,
    tone: null,
    tone-hover: null,
    tone-focus: null
  ),
  inverse: (
    color: white,
    button-text-color: $text-black,
    tone:  null,
    tone-hover: null,
    tone-focus: null
  ),
  light: (
    color: white,
    button-text-color: $text-black,
    tone:  null,
    tone-hover: null,
    tone-focus: null
  )
);

$border: 0.0625rem;

$sizes: (
  sm: (
    font-size: 0.75rem,
    line-height: 1rem,
    padding: (0.25rem - $border) (0.5rem - $border),
      icons: (
        height: 0.75rem,
        padding: 0.375rem - $border,
        width: 0.75rem,
        line-height: 0.75rem,
        font-size: 0.75rem,
      )
  ),
  md: (
    font-size: 0.875rem,
    line-height: 1rem,
    padding: (0.5rem - $border) (1rem - $border),
      icons: (
        height: 1rem,
        padding: 0.5rem - $border,
        width: 1rem,
        line-height: 1rem,
        font-size: 1rem,
      )
  ),
  lg: (
    font-size: 0.875rem,
    line-height: 1.25rem,
    padding: (0.625rem - $border) (1.5rem - $border),
      icons: (
        height: 1rem,
        padding: 0.75rem - $border,
        width: 1rem,
        line-height: 1rem,
        font-size: 1rem,
      )
  ),
  xl: (
    font-size: 0.875rem,
    line-height: 1.25rem,
    padding: (0.875rem - $border) (1.5rem - $border),
      icons: (
        height: 1rem,
        padding: 1rem - $border,
        width: 1rem,
        line-height: 1rem,
        font-size: 1rem,
      )
  )
);

.chi-button {
  & {
    align-items: center;
    background-color: set-color(white);
    border: $border solid set-color(grey, 30);
    box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
    color: $text-color;
    cursor: pointer;
    display: inline-flex;
    font-size: $text;
    font-weight: 600;
    line-height: $line-height-smaller;
    outline: 0;
    padding: (0.5rem - $border) (1rem - $border);
    text-align: center;
    transition: background-color 0.12s ease-in, border-color 0.1s ease-in, color 0.12s ease-in;
    vertical-align: middle;
    white-space: nowrap;

    &[disabled],
    &.-disabled {
      opacity: 0.65;
      pointer-events: none;

      & .chi-icon {
        opacity: 0.65;
      }
    }

    .chi-icon {
      height: 1rem;
      width: 1rem;
    }

    .chi-spinner {
      height: 1rem;
      width: 1rem;
    }

    &__content {
      align-items: center;
      display: inline-flex;
      justify-content: center;

      & > :not(:last-child) {
        margin-right: 0.5rem;
      }
    }

    @each $type in map-keys($sizes) {
      &.-#{$type} {
        font-size: map-get(map-get($sizes, $type), font-size);
        line-height: map-get(map-get($sizes, $type), line-height);
        padding: map-get(map-get($sizes, $type), padding);

        .chi-icon {
          height: map-get(map-get(map-get($sizes, $type), icons), height);
          width: map-get(map-get(map-get($sizes, $type), icons), width);

          &[class^='icon-'],
          &[class*=' icon-'] {
            font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
            line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
          }
        }

        .chi-spinner {
          height: map-get(map-get(map-get($sizes, $type), icons), height);
          width: map-get(map-get(map-get($sizes, $type), icons), width);
        }

        &.-icon {
          padding: map-get(map-get(map-get($sizes, $type), icons), padding);
        }
      }
    }

    &:hover,
    &.-hover {
      background-color: set-color(grey, 20);
      border: $border solid set-color(grey, 30);
      text-decoration: none;
    }

    &:focus,
    &.-focus {
      border: $border solid set-color(grey, 30);
      outline: 0.125rem solid $focus-color;
      outline-offset: 0.0625rem;
      z-index: $zindex-prominent;
    }

    &:active,
    &.-active {
      background-color: set-color(grey, 25);
      border: $border solid rgba(set-color(grey, 70), 0.2);
      outline: none;
    }

    &.-icon {
      padding: (0.5rem - $border);
    }

    // sass-lint:disable max-line-length
    &.-float {
      border-color: set-color(grey, 40);
      border-radius: 50%;
      box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.24), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 16px 0 rgba(0, 0, 0, 0.12);
      padding: 0.6875rem;
      transition: box-shadow 0.15s ease-in, background-color 0.15s ease-in;

      &:active,
      &.-active {
        box-shadow: 0 4px 4px -2px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 2px 14px 1px rgba(0, 0, 0, 0.12);
        outline: none;
      }

      .chi-icon {
        height: 1rem;
        width: 1rem;
      }
    }
    // sass-lint:enable max-line-length

    &.-fluid:not(.-float) {
      width: 100%;
    }

    &.-close {
      &,
      &:hover,
      &.-hover,
      &:focus,
      &.-focus,
      &:active,
      &.-active {
        background-color: transparent;
        border-color: transparent;
        box-shadow: none;
      }
    }

    &.-outline {
      background-color: transparent;
      border: $border solid set-color(grey, 50);

      &:hover,
      &.-hover {
        background-color: set-color(grey, 70);
        border-color: set-color(grey, 70);
        color: set-color(white);

        .chi-icon {
          color: set-color(white);
        }

        .chi-spinner__icon {
          .path {
            stroke: set-color(white);
          }
        }
      }

      &:focus,
      &.-focus {
        border: $border solid set-color(grey, 70);
        outline: 0.125rem solid $focus-color;
        outline-offset: 0.0625rem;
      }

      &:active,
      &.-active {
        background-color: set-color(grey, 80);
        border-color: set-color(grey, 80);
        color: set-color(white);
        outline: none;
      }
    }

    &.-flat {
      background-color: transparent;
      border: $border solid transparent;
      box-shadow: none;
      color: $text-color;

      @each $type in map-keys($sizes) {
        &.-#{$type} {
          font-size: map-get(map-get($sizes, $type), font-size);
          line-height: map-get(map-get($sizes, $type), line-height);

          .chi-icon {
            height: map-get(map-get(map-get($sizes, $type), icons), height);
            width: map-get(map-get(map-get($sizes, $type), icons), width);

            &[class^='icon-'],
            &[class*=' icon-'] {
              font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
              line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
            }
          }

          .chi-spinner {
            height: map-get(map-get(map-get($sizes, $type), icons), height);
            width: map-get(map-get(map-get($sizes, $type), icons), width);
          }
        }
      }

      &:hover,
      &.-hover {
        background-color: set-color(white);
        border: $border solid set-color(grey, 30);
        box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);

        @each $type in map-keys($sizes) {
          &.-#{$type} {
            font-size: map-get(map-get($sizes, $type), font-size);
            line-height: map-get(map-get($sizes, $type), line-height);

            .chi-icon {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);

              &[class^='icon-'],
              &[class*=' icon-'] {
                font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
                line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
              }
            }

            .chi-spinner {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);
            }
          }
        }
      }

      &:focus,
      &.-focus {
        border: $border solid set-color(grey, 30);
        outline: 0.125rem solid $focus-color;
        outline-offset: 0.0625rem;

        &.-icon {
          padding: (0.5rem - $border);
        }

        @each $type in map-keys($sizes) {
          &.-#{$type} {
            font-size: map-get(map-get($sizes, $type), font-size);
            line-height: map-get(map-get($sizes, $type), line-height);
            padding: map-get(map-get($sizes, $type), padding);

            .chi-icon {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);

              &[class^='icon-'],
              &[class*=' icon-'] {
                font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
                line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
              }
            }

            .chi-spinner {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);
            }

            &.-icon {
              padding: map-get(map-get(map-get($sizes, $type), icons), padding);
            }
          }
        }
      }

      &:active,
      &.-active {
        background-color: set-color(grey, 25);
        border: $border solid rgba(set-color(grey, 70), 0.2);
        outline: none;

        &:focus,
        &.-focus {
          box-shadow: none;
        }

        &.-icon {
          padding: (0.5rem - $border);
        }

        @each $type in map-keys($sizes) {
          &.-#{$type} {
            font-size: map-get(map-get($sizes, $type), font-size);
            line-height: map-get(map-get($sizes, $type), line-height);

            .chi-icon {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);

              &[class^='icon-'],
              &[class*=' icon-'] {
                font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
                line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
              }
            }

            .chi-spinner {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);
            }

            &.-icon {
              padding: map-get(map-get(map-get($sizes, $type), icons), padding);
            }
          }
        }
      }

      &.-no-hover {
        &:hover,
        &.-hover,
        &:active,
        &.-active {
          border-color: transparent;
          box-shadow: none;
        }

        &:focus,
        &.-focus {
          border-color: set-color(grey, 40);
          outline: none;
        }
      }
    }
  }

  @each $color-definition in $state-colors {
    $button-text-color: map-get(nth($color-definition, 2), button-text-color);
    $color: map-get(nth($color-definition, 2), color);
    $tone: map-get(nth($color-definition, 2), tone);
    $tone-focus: map-get(nth($color-definition, 2), tone-focus);
    $tone-hover: map-get(nth($color-definition, 2), tone-hover);
    $type: nth($color-definition, 1);

    @if(($type == 'inverse') or ($type == 'light')) {
      &.-#{$type} {
        background-color: white;
        border: $border solid white;
        color: $text-black;

        &:hover,
        &.-hover {
          background-color: white;
          border: $border solid white;
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: white;
            border: $border solid transparent;
          }
        }

        .chi-icon {
          color: $text-black;
        }

        &.-flat {
          background-color: transparent;
          border: $border solid transparent;
          box-shadow: none;
          color: set-color($color);

          &:hover,
          &.-hover,
          &:focus,
          &.-focus,
          &:active,
          &.-active {
            background-color: transparent;
            border: $border solid set-color($color);
            color: set-color($color);

            .chi-icon {
              color: set-color($color);
            }
          }

          .chi-icon {
            color: set-color($color);
          }

          &.-no-hover {
            &:hover,
            &.-hover {
              border-color: transparent;
            }

            &:focus,
            &.-focus {
              border-color: set-color($color);
              outline: none;
            }
          }
        }

        &.-outline {
          background-color: transparent;
          border: $border solid set-color($color);
          box-shadow: none;
          color: set-color($color);

          &:hover,
          &.-hover,
          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: set-color($color);
              color: $text-black;

              .chi-icon {
                color: $text-black;
              }
            }
          }

          &:focus,
          &.-focus {
            background-color: transparent;
            border: $border solid set-color($color);
          }

          .chi-icon {
            color: set-color($color);
          }
        }
      }

    } @else {

      &.-#{$type} {
        background-color: set-color($color, $tone);
        border: $border solid set-color($color, $tone);
        box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
        color: set-color($button-text-color);

        .chi-icon {
          color: inherit;
        }

        .chi-spinner__icon {
          .path {
            stroke: set-color(white);
          }
        }

        &:hover,
        &.-hover {
          background-color: set-color($color, $tone-hover);
          border: $border solid set-color($color, $tone-hover);
          box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
        }

        &:focus,
        &.-focus {
          box-shadow: none;
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: set-color($color, $tone-focus);
            border: $border solid transparent;
            box-shadow: none;
          }
        }

        &.-outline {
          background-color: transparent;
          border: $border solid set-color($color, $tone);
          box-shadow: none;
          color: set-color($color, $tone);

          .chi-spinner__icon {
            .path {
              stroke: set-color($color, $tone);
            }
          }

          &:hover,
          &.-hover {
            background-color: set-color($color, $tone);
            color: set-color(white);

            @if ($type == 'secondary') {
              color: $text-black;
            }

            .chi-icon {
              @if ($type == 'secondary') {
                color: $text-black;
              } @else {
                color: inherit;
              }
            }

            .chi-spinner__icon {
              .path {
                stroke: set-color(white);
              }
            }
          }

          &:focus,
          &.-focus {
            border: $border solid set-color($color, $tone);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: set-color($color, $tone-focus);
              border: $border solid transparent;

              @if ($type == 'secondary') {
                color: $text-black;
              } @else {
                color: set-color(white);
              }

              .chi-icon {
                @if ($type == 'secondary') {
                  color: $text-black;
                } @else {
                  color: inherit;
                }
              }

              .chi-spinner__icon {
                .path {
                  stroke: set-color(white);
                }
              }
            }
          }
        }

        &.-flat {
          background-color: transparent;
          border: $border solid transparent;
          box-shadow: none;
          color: set-color($color, $tone);

          &:hover,
          &.-hover {
            border: $border solid set-color($color, $tone);
          }

          &:focus,
          &.-focus {
            border: $border solid set-color($color, $tone);
            box-shadow: none;
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: transparent;
              border: $border solid set-color($color, $tone);
              box-shadow: none;
            }
          }

          &.-no-hover {
            &:hover,
            &.-hover {
              border-color: transparent;
            }

            &:focus,
            &.-focus {
              border-color: set-color($color, $tone);
              outline: none;
            }
          }
        }

        // sass-lint:disable max-line-length
        &.-float {
          box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.24), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 16px 0 rgba(0, 0, 0, 0.12);

          &:active,
          &.-active {
            box-shadow: 0 4px 4px -2px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 2px 14px 1px rgba(0, 0, 0, 0.12);
          }
        }
        // sass-lint:enable max-line-length
      }
    }
  }
}
